Route with a Trie task contains A trie and router classes. I used a Trie (as I previously explained for problem 5) because it’s the best data structure when it comes to working with a sequence. In trie we can insert, delete and find in O(n). In addition, we save up memory for shared items(path parts) between different paths, The time complexity for insert and find from a Trie is O(n). Space complexity is O(n*m), where n is the number of keys(split path) in the root directory and m is the size of the dictionary for each key.
The time and space complexity for the router inset and lookup is also O(n) since it’s based on a Trie as well.