About finding suffixes task. It was implemented with a Trie because it’s the best data structure when it comes to working with a sequence. In trie we can insert, delete and find in O(n). In addition, we save up memory for shared items(charachters) between words, for ex: we can store “found” and then when we want to store “foundation” we end up appending on “found” not creating a new dict(storage) for the new word. 
The time complexity for insert and find from a Trie is O(n). Space complexity is O(n*m), where n is the number of keys in the root directory and m is the size of the dictionary for each key. 