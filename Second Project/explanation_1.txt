Regarding LRU cache task. At first, it came to mind to use a dict and a queue to specify the order of the recently used keys. Due to when get() is called, there's a cache hit and I need to dequeue it and add to the the tail of the queue. That process will take O(n) as worst case and we need each operation to be O(1). So, I did a little search online about dict, lists to see insert, delete for each. That's when I came across ordered-dict. It has extraction, insertion as normal dict (=O(1)) and i can relocate the recently used item (when get() is called) to the end, that relocation has O(1). Therefore, when set() is called and the cache is full I simply can remove the first item which is LRU item. 
At the end, by choosing the ordered-dict, all the set, get operations is O(1) and that's what we need. Space complexity of dict is O(n).